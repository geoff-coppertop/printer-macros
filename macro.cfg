[gcode_macro CLEAN_NOZZLE]
gcode:
  {% set toolTemp = params.HOTEND_TEMP|default(200)|int %}

  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp}

  M83                            ; set extruder to relative

  G1 E45 F1000                  ; quickly load filament set for direct drive, for bowden set to E280
  G1 E30 F300                    ; slower extrusion for hotend path
  G1 E50 F150                    ; prime nozzle with filament
  G1 E-100 F1000                 ; retract filament completely, set to E380 for Bowden

  M82                            ; set extruder to absolute

[gcode_macro END_PRINT]
# Put the following in the Cura end code and remove everything else:
# END_PRINT
gcode:
  {% set axismax = printer.toolhead.axis_maximum %}
  {% set pos     = printer.toolhead.position     %}

  M106 S255           # full fan

  G91                 # Relative positioning
  G1 E-0.5 F2700      # Retract a bit
  G1 E-0.5 Z0.2 F2400 # Retract and raise Z
  G1 X10 Y10 F5000      # Wipe out
  G90                 # Absolute positioning

  #Move toolhead away from finished print
  {% if pos.z <= ( axismax.z - 40 ) %}
    G1 X10 Y{axismax.y - 50} Z{ pos.z + 40 }
  {% else %}
    G1 X10 Y{axismax.y - 50} Z{ axismax.z }
  {% endif %}

  TURN_OFF_HEATERS

  G91             # Relative positioning
  G4 S30
  G1 E-0.5 F2700  # retract a bit more after cooling for 30 seconds about 20 degrees
  G4 S30
  G1 E-0.5 F2700  # retract a bit more after cooling for 30 seconds about 20 degrees

  TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=50
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=50

  M107    # turn off fan

  M82         # Absolute extrusion mode
  M84 X Y E   # Disable all steppers but Z

[gcode_macro START_PRINT]
# put the following in the prusa slicer start code and remove everything else:
# START_PRINT HOTEND_TEMP={first_layer_temperature[0]} BED_TEMP={first_layer_bed_temperature[0]}
gcode:
  {% set toolTemp = params.HOTEND_TEMP|default(200)|int %}
  {% set toolPreheatTemp = params.HOTEND_PREHEAT_TEMP|default(150)|int %}  
  {% set bedTemp = params.BED_TEMP|default(60)|int %}
  
  {action_respond_info("Heating bed: %dC" % bedTemp)}
  {action_respond_info("Heating nozzle: %dC" % toolTemp)}

  M107 # Print fan off

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedTemp}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolPreheatTemp}

  G28

  Z_TILT_ADJUST

  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedTemp}  # Wait for bed to get to target temperature.

  BED_MESH_CLEAR
  BED_MESH_CALIBRATE ADAPTIVE=1

  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={toolTemp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp - 5} # Wait for nozzle to get close to target temperature.

  LINE_PURGE

  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={toolTemp} # Wait for nozzle to get to target temperature.

# https://klipper.discourse.group/t/interruptible-heat-soak/1552
[gcode_macro HEAT_SOAK]
description: heats the bed for a while
 
variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
 
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
 
gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
 
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
 
    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
 
    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50
 
    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER
 
    M84 ;; turn off steppers
 
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }
 
[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
 
[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
 
    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
 
    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}
 
    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
 
        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}
 
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"
 
    {% if stage in ("done", "cancel") %}
 
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
 
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}
 
        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
 
    {% else %}
 
        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}
 
        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }
 
        ## dwell for 1ms to prevent from going idle
        G4 P1
 
    {% endif %}
